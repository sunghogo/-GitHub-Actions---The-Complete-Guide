git init: Initializes .git/git repository for current directory
git status: Displays current git status
git log: Displays all commits

git remote: Displays list of all connected remote repositories
git remote get-url <connected remote repository name>: Displays repository URL of specified connected remote repo
git remote add <local name/'origin'> <remote repository HTTPS link>: Names local repository and links it to remote repository link
git push --set-upstream <local repository name/'origin'> <remote repository branch>: Sets up continuous pushing from local repository to linked remote repository
git push <local repository name/'origin'> <remote repository branch>: One time push from local repository to linked remote repository
git remote set-url <local repo name/'origin'> <remote repo link but with 'username@' right before github.com to specify user>: Sets up username permission to access remote repo. Prompts Personal Access Tokens from GitHub settings->Developer Settings->Personal access tokens->set name, duration, and check all repo settings
git pull: Pulls all commits to local repository from latest version of remote repository
git clone <remote repository HTTPS link> <local directory name/defaults to remote repo name>: Clones remote repository to local machine

git config --global user.name <"username">: Sets up new username
git config --global user.email <"email">: Sets up new email

git submodule add <submodule remote repository HTTPS link> <submodule directory name>: Creates a submodule directory and links it to specified remote repository
git submodule init: Initializes the submodules
git submodule update: Updates submodule to latest commit on PARENT REPO

git add <file(s)>: Stages file(s) for next commit
git add <directory>: Stages all files inside directory
git add ./*/--all: Stages all files in project
git commit -m <"commit message">: Creates a commit that includes all staged changes with input commit message
git push: Pushes all new local commits to remote repository

git checkout <id>: Temporarily move to another commit/branch
git revert <id>: Revert changes of commit by creating a new commit (with changes to undo the specified commit)
git reset: undo current commits
git reset --hard <id>: Undo changes by deleting all commits since <id>

* branch names with spaces separated by '-' or '/' *
git branch <name>: Splits off a new branch with specified name
git checkout <branch name>: Move to different branch
git checkout -b <new branch name>: Creates and moves to new branch
git merge <branch name>: Merges commits of current branch with specifed branch (current branch should be the one behind)
git branch -D <branch name>: Deletes specifed branch

.gitignore: Special file that tells git to not stage all files and directorys listed
README.md: Special file that is displayed on the remote repository page (uses Markdown)

Github:
Settings->Branches->Branch protection rules-> Rule name = branch name -> ex. Require a pull request before merging -> require approvals

Colllaborators:
Add Colllaborators to Repository, Give then limited repo access Personal Access Keys

Pull requests -> Create pull request (base: branch we want to merge changes into, compare: branch we want to merge changes from) -> Create pull request -> Link Issue # in Description -> Request Reviewers

Approved -> Merge allowed? -> If issue is closed, link issue #1 and close Pull Request -> Close Issue

Forks:
If you do not have access as a collaborator, you can fork the repository to your account as a brand new remote repo and link

Can merge changes to original repository using a Pull Request -> Compare across forks